nxt()
top_counts <- filter(pack_sum, count > 679)
exit
exit()
leave(0)
leave()
info()
skip()
swirl()
library(swirl)
rm(list=ls())
install_from_swirl("Exploratory Data Analysis")
swirl()
library('ggplot2')
install_packages('ggplot2')
packages_install('ggplot2')
install.packages('ggplot2')
swirl()
head(pollution, n =3)
head(pollution)
dim(pollution)
pollution$mp25
summary(pollution$pm25)
quantile(pollution$pm25)
quantile(ppm)
boxplot(ppm , col=blue)
boxplot(ppm , col= "blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks=100)
rug(ppm)
hist(ppm, col = "green")
abline(v=12, lwd= 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in
| Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ reg, pollution, col = "red")
boxplot(pm25 ~ region, pollution, col = "red")
par(mfrow=c(2,1), mar=c(4,4,2,1))
subset(pollution)
subset(pollution, region == "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
west <- subset(pollution, region == "west")
hist(subset(pollution, region == "west")$pm25, col = "green" )
plot
with(pollution, plot(lattitude,pm25))
with(pollution, plot(latitude,pm25))
abline(h = 12, lwd=2,lty=2)
col
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region = 'west')
west <- subset(pollution, region == 'west')
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, eruptions, waiting)
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, geyserplot.png)
dev.copy(png, 'geyserplot.png')
dev.copy(png, file ='geyserplot.png')
dev.off()
head(cars)
with(cars, plot(speed,dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
ggplot2(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab=
"Ozone (ppb)", col.axis = "blue", col.lab = "red")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab=
"Ozone (ppb)", col.axis = "blue", col.lab = "red", main = "Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
library('swirl')
swilr()
swirl()
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
?par
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main = "Wind and Ozone in NYC")
may <- subset(airquality$Month == "May")
may <- subset(airquality, month == "May")
may <- subset(airquality, Month == "May")
may <- subset(airquality, Month == 5)
as
points(may$Wind, may$Ozone, col="blue, pch=17")
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
lenend(dad)
legend(asd)
legend()
test
cars
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline( v= median(airquality$Wind), lty = 2, ltw = 2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
mfrow(c(1,2))
par(mfrow(1,2))
par(mfrow = (1,2))
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone , main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone , main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
with(airquality, plot(Temp, Ozone, main = "Ozone and Temperature"))
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext()
d
a
cars
mtext("Ozone and Weather in New York City", outer = TRUE)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, airquality)
xyplot(Ozone ~ Wind, airquality, col="red", pch=8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data =airquality, col="red", pch=8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, col="red", pch=8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality , layout = c(5,1))
xyplot(Ozone ~ Wind |Month, data = airquality , layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x |f, layout = c(2,1))
v1
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, strip = FALSE, pch=20, xlab= myxlab , ylab = myylab, main = mymain)
xyplot(price~carat | color*cut , strip = FALSE, pch=20, xlab= myxlab , ylab = myylab, main = mymain)
xyplot(price~carat | color , strip = FALSE, pch=20, xlab= myxlab , ylab = myylab, main = mymain)
xyplot(price~carat | cut , strip = FALSE, pch=20, xlab= myxlab , ylab = myylab, main = mymain)
xyplot(price~carat, strip = FALSE, pch=20, xlab= myxlab , ylab = myylab, main = mymain)
xyplot(price~carat | color*cut , data = diamonds , strip = FALSE, pch=20, xlab= myxlab , ylab = myylab, main = mymain)
xyplot(price~carat | color*cut , data = diamonds ,  pch=20, xlab= myxlab , ylab = myylab, main = mymain)
dir()
getwd()
setwd("Desktop/Programming/R")
ls()
setwd("RepDataAssignment1/")
read.csv("")
read.csv("activity.zap")
read.csv("activity.zip")
data <- read.csv("activity.zip")
head(data)
summary(data)
data <- read.table("activity.zip")
head(data)
data <- read.table(unz("activity.zip"))
data <- read.csv("activity.csv")
head(data)
summary(data)
str(data)
sum(is.na(data))
sum(data)
sum(is.na(data)!)
sum(!is.na(data))
sum(!is.na(data$steps))
sum(is.na(data$steps))
head(data$steps)
head(state)
head(data)
data
head(steps, n=20)
head(steps, nrow =20)
head(steps,  n=20)
head(data, nrow =20)
head(data, n=20)
head(data, n=30)
head(data[!is.na(data)])
head(data[is.na(data)])
data[!is.na(data)]
mean(data, sum(is.na(data)))
sum(is.na(data))
sum(is.na(data$steps))
sum(is.na(data$steps))/ sum(data)
sum(is.na(data$steps))/ sum(data$steps)
sum(is.na(data$steps))/ sum(!is.na(data$steps))
head(data)
hist(data$steps)
hist(data$steps, data$date)
hist(data$date, data$steps)
data
hist(data$steps)
hist(data$date)
hist(as.numeric(data$date), data$steps)
hist(as.numeric(as.POSIXct(data$date)), data$steps)
as.POSIXct(data$date)
as.numeric(as.POSIXct(data$date))
dates <- as.numeric(as.POSIXct(data$date))
hist(dates)
hist(dates, data$steps)
hist(dates, sum(data$steps))
hist(sum(data$steps))
hist(sum(data$steps, na.rm = TRUE))
levels(data$date)
?aggregate
aggregate(date ~ steps, data=data)
tail(data)
sum(data$steos)
sum(data$steps)
sum(data$steps, na.rm = TRUE)
data
dim(data)
?aggregate
aggregate(data, steps ~ date())
aggregate(data, steps ~ date)
head(data)
aggregate(data, steps ~ date, sum)
aggregate(data, steps ~ date, sum, na.rm = TRUE)
aggregate(data, date ~ steps, sum, na.rm = TRUE)
aggregate(data, steps ~ levels(date), sum, na.rm = TRUE)
aggregate(steps ~ date , data, sum)
stepsByDay <- aggregate(steps ~ date , data, sum)
hist(stepsByDay$steps)
hist(stepsByDay$steps, main = "Frequency of Number of Steps per Day", xlab = "Steps per Day")
mean(stepsByDay)
mean(stepsByDay, na.rm = TRUE)
mean(stepsByDay$steps, na.rm = TRUE)
plot.ts(data$steps)
plot.ts(data$steps, data$interval)
plot.ts(data$interval, data$steps)
aggregate(steps, interval, data, sum)
aggregate(steps, interval, sum, data)
head(data)
aggregate(steps ~ interval, sum, data)
aggregate(steps ~ interval, data , sum)
aggregate(steps ~ interval, data , mean)
aveStepsPerInt <- aggregate(steps ~ interval, data , mean)
plot.ts(aveStepsPerInt)
plot.ts(aveStepsPerInt$steps, aveStepsPerInt$interval)
plot.ts(aveStepsPerInt$interval, aveStepsPerInt$steps)
?plot.ts
plot(aveStepsPerInt$interval, aveStepsPerInt$steps)
plot(aveStepsPerInt$interval)
plot(aveStepsPerInt$interval, aveStepsPerInt$steps, main = "Average Number of Steps per Interval")
plot(aveStepsPerInt$interval, aveStepsPerInt$steps, main = "Average Number of Steps per Interval", ylab= "Average Number of Steps", xlab= "Interval")
ggplot(aveStepsPerInt$interval, aveStepsPerInt$steps, main = "Average Number of Steps per Interval", ylab= "Average Number of Steps", xlab= "Interval"))
ggplot(aveStepsPerInt$interval, aveStepsPerInt$steps, main = "Average Number of Steps per Interval", ylab= "Average Number of Steps", xlab= "Interval")
library(ggplot2)
ggplot(aveStepsPerInt$interval, aveStepsPerInt$steps, main = "Average Number of Steps per Interval", ylab= "Average Number of Steps", xlab= "Interval")
qplot(aveStepsPerInt$interval, aveStepsPerInt$steps, main = "Average Number of Steps per Interval", ylab= "Average Number of Steps", xlab= "Interval")
max(aveStepsPerInt$steps)
which.max(aveStepsPerInt$steps)
aveStepsPerInt[104]
aveStepsPerInt[104,]
aveStepsPerInt[104, 2]
aveStepsPerInt[104, 1]
plot(aveStepsPerInt$interval, aveStepsPerInt$steps, main = "Average Number of Steps per Interval", ylab= "Average Number of Steps", xlab= "Interval")
plot(aveStepsPerInt$interval, aveStepsPerInt$steps, main = "Average Number of Steps per Interval", ylab= "Average Number of Steps", xlab= "Interval", type = "l")
plot(aveStepsPerInt$interval, aveStepsPerInt$steps, main = "Average Number of Steps per Interval", ylab= "Average Number of Steps", xlab= "Interval", type = "l", vline="835")
plot(aveStepsPerInt$interval, aveStepsPerInt$steps, main = "Average Number of Steps per Interval", ylab= "Average Number of Steps", xlab= "Interval", type = "l")
abline(h= aveStepsPerInt[which.max(aveStepsPerInt$steps), 1])
abline(v= aveStepsPerInt[which.max(aveStepsPerInt$steps), 1])
abline(v= aveStepsPerInt[which.max(aveStepsPerInt$steps), 1], col = "blue")
aggregate(steps ~ date , activitydata, sum)
activitydata <- data
aggregate(steps ~ date , activitydata, sum)
aggregate(steps ~ date , activitydata, mean)
aggregate(steps ~ interval, activitydata , mean)
sum(is.na(data$steps))
data[is.na(data$steps))]
data[is.na(data$steps)]
data[is.na(data$steps),]
dim(data[is.na(data$steps),])
head(data[is.na(data$steps),])
missingdata <- data[is.na(data$steps),]
missingdata
diff(data, missingdata)
diff(1,4)
diff(4,1)
diff(341.2, 2)
merge(data, missingdata
)
data
activitydata
?merge
head(activitydata)
activityfilled <- activitydata
for (i in 1:nrow(activityfilled)) {
if (is.na(activityfilled$steps[i,])) {
activityfilled$steps[i,] <- aveStepsPerInt[activityfilled$interval, 1]
}
}
activityfilled <- activitydata
for (i in 1:nrow(activityfilled)) {
if (is.na(activityfilled$steps[i,])) {
activityfilled[i,]$steps <- aveStepsPerInt[activityfilled$interval, 1]
}
}
activityfilled <- activitydata
for (i in 1:nrow(activityfilled)) {
if (is.na(activityfilled[i,]$steps)) {
activityfilled[i,]$steps <- aveStepsPerInt[activityfilled$interval, 1]
}
}
aveStepsPerInt[activityfilled$interval, 1]
aveStepsPerInt[which.max(aveStepsPerInt$steps), 1]
aveStepsPerInt[which.max(aveStepsPerInt$steps)]
aveStepsPerInt[which.max(aveStepsPerInt$steps),]
aveStepsPerInt[12,]
sum(is.na(activitydata$steps))
activityfilled <- activitydata
for (i in 1:nrow(activityfilled)) {
if (is.na(activityfilled[i,]$steps)) {
activityfilled[i,]$steps
}
}
for (i in 1:nrow(activityfilled)) {
if (is.na(activityfilled[i,]$steps)) {
print(activityfilled[i,]$steps)
}
}
for (i in 1:nrow(activityfilled)) {
if (is.na(activityfilled[i,]$steps)) {
activityfilled[i,]$steps
print(aveStepsPerInt$interval == activityfilled[i,]$interval)
}
}
aveStepsPerInt[which.max(aveStepsPerInt$steps), 1]
aveStepsPerInt[14, 1]
aveStepsPerInt$steps = 0
aveStepsPerInt[which.max(aveStepsPerInt$steps), 1]
aveStepsPerInt <- aggregate(steps ~ interval, activitydata , mean)
aveStepsPerInt[which.max(aveStepsPerInt$steps), 1]
?aveStepsPerInt
subset(aveStepsPerInt$interval = 3)
subset(aveStepsPerInt$interval == 3)
subset(aveStepsPerInt$interval == 3, )
subset(aveStepsPerInt, aveStepsPerInt$interval == 3 )
subset(aveStepsPerInt, aveStepsPerInt$interval == 0 )
subset(aveStepsPerInt, aveStepsPerInt$interval == 50 )
subset(aveStepsPerInt, aveStepsPerInt$interval == 10 )
subset(aveStepsPerInt, aveStepsPerInt$interval == 10 )[1,]
subset(aveStepsPerInt, aveStepsPerInt$interval == 10 )[,2]
for (i in 1:nrow(activityfilled)) {
if (is.na(activityfilled[i,]$steps)) {
activityfilled[i,]$steps <- subset(aveStepsPerInt, aveStepsPerInt$interval == activityfilled[i,]$interval )[,2]
}
}
sum(is.na(activityfilled))
?plot
hist(stepsByDay$steps, main = "Frequency of Number of Steps per Day", xlab = "Steps per Day", break=)
hist(stepsByDay$steps, main = "Frequency of Number of Steps per Day", xlab = "Steps per Day", break=10)
hist(stepsByDay$steps, main = "Frequency of Number of Steps per Day", xlab = "Steps per Day", break="10")
hist(stepsByDay$steps, main = "Frequency of Number of Steps per Day", xlab = "Steps per Day")
hist(stepsByDay$steps, main = "Frequency of Number of Steps per Day", xlab = "Steps per Day", breaks = "10")
hist(stepsByDay$steps, main = "Frequency of Number of Steps per Day", xlab = "Steps per Day", breaks = 10)
head(activityfilled)
hist(stepsByDay$steps, main = "Frequency of Number of Steps per Day", xlab = "Steps per Day", breaks = 5)
hist(stepsByDay$steps, main = "Frequency of Number of Steps per Day", xlab = "Steps per Day", breaks = 10)
breaks <- levels(interval)
breaks <- levels(activityfilled$interval)
levels(activityfilled$interval)
unique(activityfilled$interval)
sum(unique(activityfilled$interval))
count(unique(activityfilled$interval))
length(unique(activityfilled$interval))
numbreaks <- length(unique(activityfilled$interval))
hist(stepsByDay$steps, main = "Frequency of Number of Steps per Day", xlab = "Steps per Day", breaks = numbreaks)
hist(stepsByDay$steps, main = "Frequency of Number of Steps per Day", xlab = "Steps per Day", breaks = numbreaks/2)
hist(stepsByDay$steps, main = "Frequency of Number of Steps per Day", xlab = "Steps per Day", breaks = numbreaks/10)
?weekdays
weekdays(2)
weekdays(activityfilled$data)
weekdays(activityfilled$date)
weekdays(as.POSIXT(activityfilled$date))
weekdays(as.posixct(activityfilled$date))
weekdays(as.POSIXCT(activityfilled$date))
as.POSIXct(activityfilled$date)
weekdays(as.POSIXct(activityfilled$date))
activityfilled$dayofweek <- as.POSIXct(activityfilled$date)
head(activityfilled)
activityfilled$dayofweek <- weekdays(as.POSIXct(activityfilled$date))
head(activitydata)
head(activityfilled)
tail(activityfilled)
?qplot
qplot(activityfilled$interval, mean(activityfilled$steps))
qplot(activityfilled$interval, aveStepsPerInt)
head(aveStepsPerInt)
head(activityfilled$interval)
qplot(activityfilled$interval, aveStepsPerInt[,2])
qplot(activityfilled$interval, aveStepsPerInt[,1])
qplot(aes(activityfilled$interval, aveStepsPerInt[,1]))
qplot(activityfilled$interval, activityfilled$steps)
qplot(activityfilled$interval, activityfilled$steps, type='l')
qplot(activityfilled$interval, activityfilled$steps) + facet_grid(activityfilled$dayofweek)
qplot(activityfilled$interval, activityfilled$steps) + facet_grid(factor(activityfilled$dayofweek))
ggplot(activityfilled$interval, activityfilled$steps) + geom_line()
ggplot(aes(activityfilled$interval, activityfilled$steps)) + geom_line()
ggplot(data=activityfilled, aes(activityfilled$interval, activityfilled$steps)) + geom_line()
ggplot(data=activityfilled, aes(activityfilled$interval, aveStepsPerInt)) + geom_line()
dim(aveStepsPerInt)
dim(activityfilled)
dim(activityfilled$interval)
length(activityfilled$interval)
ggplot(data=activityfilled, aes(unique(activityfilled$interval), aveStepsPerInt)) + geom_line()
length(unique(activityfilled$interval))
ggplot(data=activityfilled, aes(unique(activityfilled$interval), aveStepsPerInt[,2])) + geom_line()
ggplot(aes(unique(activityfilled$interval), aveStepsPerInt[,2])) + geom_line()
ggplot(data=aveStepsPerInt ,aes(unique(activityfilled$interval), aveStepsPerInt[,2])) + geom_line()
ggplot(data=aveStepsPerInt ,aes(unique(activityfilled$interval), aveStepsPerInt[,2])) + geom_line() + facet_grid(activityfilled$dayofweek)
ggplot(data=aveStepsPerInt ,aes(unique(activityfilled$interval), aveStepsPerInt[,2])) + geom_line() + facet_grid(factor(activityfilled$dayofweek))
xyplot(aveStepsPerInt[,2] ~ activityfilled$interval)
library(lattice)
xyplot(aveStepsPerInt[,2] ~ activityfilled$interval)
xyplot(aveStepsPerInt[,2] ~ activityfilled$interval | activityfilled$dayofweek)
cacheMethod()
dsd
x
ooò
oò <- 2
?aes
plot(activityfilled$interval)
plot(activityfilled$interval, aveStepsPerInt[,2])
plot(unique(activityfilled$interval), aveStepsPerInt[,2])
stepsInterval2=aggregate(steps~interval+day,activityFilled,mean)
stepsInterval2=aggregate(steps~interval+dayofweek,activityfilled,mean)
head(stepsInterval2)
xyplot(steps~interval|factor(day),data=stepsInterval2,aspect=1/2,type="l")
xyplot(steps~interval|factor(dayofweek),data=stepsInterval2,aspect=1/2,type="l")
activityfilled$day=ifelse(as.POSIXlt(as.Date(activityFilled$date))$wday%%6==0,
"weekend","weekday")
activityfilled$day=ifelse(as.POSIXlt(as.Date(activityfilled$date))$wday%%6==0,
"weekend","weekday")
)
head(activityfilled)
activityFilled$day=ifelse(as.POSIXlt(as.Date(activityfilled$date))$wday%%6==0,
"weekend","weekday")
activityFilled$day=factor(activityFilled$day,levels=c("weekday","weekend"))
stepsInterval2=aggregate(steps~interval+dayofweek,activityfilled,mean)
library(lattice)
xyplot(steps~interval|factor(day),data=stepsInterval2,aspect=1/2,type="l")
activityfilled$day=ifelse(as.POSIXlt(as.Date(activityfilled$date))$wday%%6==0,
"weekend","weekday")
activityfilled$day=factor(activityFilled$day,levels=c("weekday","weekend"))
stepsInterval2=aggregate(steps~interval+dayofweek,activityfilled,mean)
library(lattice)
xyplot(steps~interval|factor(day),data=stepsInterval2,aspect=1/2,type="l")
activityfilled$day=ifelse(as.POSIXlt(as.Date(activityfilled$date))$wday%%6==0,
"weekend","weekday")
head(activityfilled)
activityfilled$day=factor(activityFilled$day,levels=c("weekday","weekend"))
activityfilled$day=factor(activityfilled$day,levels=c("weekday","weekend"))
stepsInterval2=aggregate(steps~interval+dayofweek,activityfilled,mean)
xyplot(steps~interval|factor(day),data=stepsInterval2,aspect=1/2,type="l")
head(stepsInterval2)
xyplot(steps~interval|factor(dayofweek),data=stepsInterval2,aspect=1/2,type="l")
activityfilled$day=ifelse(as.POSIXlt(as.Date(activityfilled$date))$wday%%6==0,
"weekend","weekday")
activityfilled$day=factor(activityfilled$day,levels=c("weekday","weekend"))
stepsInterval2=aggregate(steps~interval+day,activityfilled,mean)
library(lattice)
xyplot(steps~interval|factor(day),data=stepsInterval2,aspect=1/2,type="l")
xyplot(steps~interval|factor(day),data=stepsInterval2,type="l")
